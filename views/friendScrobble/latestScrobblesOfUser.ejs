<h4 class="my-3">
  <img class="avatarBig" src="<%= user.image[1]['#text'] ? user.image[1]['#text'] : '/img/avatar.png' %>" alt="">
  <%= user.name %>'s scrobbles
</h4>

<div class="mt-4">
  <button class="btn" disabled onclick="checkTracksAndScrobble()" id="scrobbleBtn"
    style="background-color: #d92323; color: white;">
    <b id="scrobbleText">Scrobble selected tracks</b>
    <div id="scrobbleSpinner" style="display: none" class="spinner-border text-light" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
  </button>
  <button class="btn float-end btn-primary" onclick="selectAllTracks()">Select All</button>
  <button class="btn float-end me-2 btn-primary" onclick="deselectAllTracks()">Deselect All</button>
</div>

<div id="scrobbleSuccess" class="alert alert-success mt-4" role="alert" style="display: none">
  Successfully scrobbled tracks!
</div>
<div id="scrobbleError" class="alert alert-danger mt-4" role="alert" style="display: none">
  Error scrobbling tracks!
</div>

<div class="row mt-4">
  <div class="col">
    <table class="table table-striped">
      <tbody>
        <% tracks.forEach( (track, index)=> { %>
          <tr>
            <td>
              <img src="<%= track.cover%>" alt="">
            </td>
            <td>
              <%= track.title %>
            </td>
            <td>
              <%= track.artist%>
            </td>
            <td class="trackDateString">
              <%= track.scrobbleDate%>
            </td>
            <td>
              <input class="form-check-input" type="checkbox" name="scrobbleCheckBox"
                value="<%= JSON.stringify(track)%>" id="flexCheckDefault" onchange="trackCheckedChanged()">
            </td>
          </tr>
          <% }); %>
      </tbody>
    </table>
  </div>
</div>

<div class="modal fade" id="tracksTooOldModal" data-bs-backdrop="static" data-bs-keyboard="false" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5">Some scrobbles are too old</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        The following songs can't be scrobbled because they are too old:
        <br> <br>
        <code>
          <div id="tracksTooOld"></div>
        </code>
        <br>
        You can only scrobble up to 14 days in the past! <br>
        How to proceed?
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" onclick="scrobbleTracksIgnoreOld()">Ignore them</button>
        <button type="button" class="btn btn-primary" onclick="scrobbleTracksWithCurrentDate()"
          style="background-color: #d92323;"> Use current date</button>
      </div>
    </div>
  </div>
</div>




<nav class="mt-2 mb-4">
  <ul class="pagination">
    <li class="page-item" id="prev-btn">
      <a class="page-link" href="#" tabindex="-1" aria-disabled="true">Previous</a>
    </li>
    <% for (let page=1; page <=numPages; page++) { %>
      <li class="page-item"><a class="page-link" href="<%= page %>">
          <%= page %>
        </a></li>
      <% } %>
        <li class="page-item" id="next-btn">
          <a class="page-link" href="2">Next</a>
        </li>
  </ul>
</nav>

<script src="/scripts/lastFmUtils.js"></script>

<script>
  onLoad()
  function onLoad() {
    preparePagination();
    showScrobbleDateString()
  }

  function showScrobbleDateString() {
    let dates = document.getElementsByClassName("trackDateString");
    Array.from(dates).forEach(date => {
      date.textContent = lastFmUtils.getlocalScrobbleDateString(date.textContent);
    });
  }

  function preparePagination() {
    const page = parseInt(window.location.pathname.split('/').pop());
    const nextPage = page + 1;
    const prevPage = page - 1;

    if (page == 1)
      document.getElementById("prev-btn").classList.add("disabled");
    else
      document.getElementById("prev-btn").getElementsByClassName("page-link")[0].href = prevPage;

    if (page == <%= numPages %>)
    document.getElementById("next-btn").classList.add("disabled");
    else
    document.getElementById("next-btn").getElementsByClassName("page-link")[0].href = nextPage;

    currentPage = document.getElementsByClassName("page-item")[page]
    currentPage.classList.add("active")
  }

  function trackCheckedChanged() {
    if (getSelectedTracks().length > 0) {
      document.getElementById("scrobbleBtn").disabled = false;
    } else {
      document.getElementById("scrobbleBtn").disabled = true;
    }
  }

  function deselectAllTracks() {
    const checkBoxes = document.getElementsByName("scrobbleCheckBox");
    checkBoxes.forEach(checkBox => {
      checkBox.checked = false;
    });
    document.getElementById("scrobbleBtn").disabled = true;
  }

  function selectAllTracks() {
    const checkBoxes = document.getElementsByName("scrobbleCheckBox");
    checkBoxes.forEach(checkBox => {
      checkBox.checked = true;
    });
    document.getElementById("scrobbleBtn").disabled = false;
  }

  function getSelectedTracks() {
    const checkBoxes = document.getElementsByName("scrobbleCheckBox");
    let tracksToScrobble = []
    checkBoxes.forEach(checkBox => {
      if (checkBox.checked) {
        const track = JSON.parse(checkBox.value)
        tracksToScrobble.push({
          artist: track.artist,
          track: track.title,
          timestamp: track.scrobbleDate
        });
      }
    });
    return tracksToScrobble;
  }

  function getTooOldTracks(tracks) {
    tracksTooOld = []
    tracks.forEach(track => {
      let scrobbleDate = new Date(track.timestamp * 1000);
      let maxAgeDate = new Date();
      maxAgeDate.setDate(maxAgeDate.getDate() - 14);
      if (scrobbleDate < maxAgeDate) {
        tracksTooOld.push(track);
      }
    });
    return tracksTooOld;
  }


  function checkTracksAndScrobble() {
    let tracks = getSelectedTracks();
    const tracksTooOld = getTooOldTracks(tracks);
    let tracksMissingString = "";

    tracksTooOld.forEach(track => {
      tracksMissingString += `${track.artist} - ${track.track}<br>`;
    });

    if (tracksTooOld.length == 0) {
      scrobbleTracks(tracks);
    } else {
      $("#tracksTooOld").html(tracksMissingString,);
      $("#tracksTooOldModal").modal("show");
    }
  }

  function scrobbleTracksWithCurrentDate() {
    let tracks = getSelectedTracks();
    tracks.forEach(track => {
      let scrobbleDate = new Date(track.timestamp * 1000);
      let maxAgeDate = new Date();
      maxAgeDate.setDate(maxAgeDate.getDate() - 14);
      if (scrobbleDate < maxAgeDate) {
        track.timestamp = Math.floor(Date.now() / 1000);
      }
    });
    $("#tracksTooOldModal").modal("hide");
    scrobbleTracks(tracks);
  }

  function scrobbleTracksIgnoreOld() {
    let tracks = getSelectedTracks().filter(track => {
      let scrobbleDate = new Date(track.timestamp * 1000);
      let maxAgeDate = new Date();
      maxAgeDate.setDate(maxAgeDate.getDate() - 14);
      return scrobbleDate > maxAgeDate;
    });
    $("#tracksTooOldModal").modal("hide");
    scrobbleTracks(tracks);
  }

  async function scrobbleTracks(tracksToScrobble) {
    document.getElementById("scrobbleBtn").disabled = true;
    document.getElementById("scrobbleText").style.display = "none";
    document.getElementById("scrobbleSpinner").style.display = "block";
    document.getElementById("scrobbleSuccess").style.display = "none";
    document.getElementById("scrobbleError").style.display = "none";

    try {
      const response = await axios.put("/scrobbleBatch", tracksToScrobble)
      const numScrobbled = response.data.scrobbles["@attr"].accepted;
      document.getElementById("scrobbleSuccess").innerText = `Successfully scrobbled ${numScrobbled} tracks!`
      document.getElementById("scrobbleSuccess").style.display = "block";
    } catch (err) {
      document.getElementById("scrobbleError").textContent = err.response.data
        ?? "Error scrobbling tracks!";
      document.getElementById("scrobbleError").style.display = "block";
    }
    document.getElementById("scrobbleBtn").disabled = false;
    document.getElementById("scrobbleText").style.display = "block";
    document.getElementById("scrobbleSpinner").style.display = "none";
  }
</script>

<style>
  .avatarBig {
    width: 70px;
    height: 70px;
    border-radius: 50%;
  }
</style>